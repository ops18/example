name: "Go for prod deployment and create release"

on:
  workflow_dispatch:
  #push:
  #  tags:
  #    - 'v*'
      
jobs:
  print:
    name: Print message
    runs-on: ubuntu-latest
    steps:
      - run: |
          echo 'Will build, release and deploy to production: ${{ github.sha }}'
          
# <---------------  CHECK SEMVER FORMAT ---------------->
#  check-semver:
#    name: Check Semantic Version
#    needs: print
#    runs-on: ubuntu-latest
#    env:
#      SEM_VER_REGEX: "^v[0-9]+\\.[0-9]+\\.[0-9]+$"
#    steps:
#      - name: Checkout the code
#        uses: actions/checkout@v2

#      - name: Slugify github variables
#        uses: rlespinasse/github-slug-action@v4

#      - name: Check SemVerRegex
#        run: |
#          if (echo ${{ env.GITHUB_REF_SLUG }} | grep -Eq ${{ env.SEM_VER_REGEX }}); then
#            echo "Semantic Versioning check of tag ${{ env.GITHUB_REF_SLUG }} passed! Continuing"
#            exit 0
#          else
#            echo "Tag ${{ env.GITHUB_REF_SLUG }} does not meet the versioning REGEX: ${{ env.SEM_VER_REGEX }}"
#            echo "Please remove the Git tag and create a new one in the correct format"
#            exit 1
#          fi   

# <---------------  Create Release ---------------->
  create-release:
    name: Create release
    runs-on: ubuntu-latest
    needs: [ print ]
    steps:
      - name: Get short SHA
        id: short_sha
        run: |
          short_sha=$(echo ${{ github.sha }} | cut -c1-7)
          echo "input SHA: ${{ github.sha }}, shorted sha: $short_sha"
          echo "::set-output name=short_sha::$short_sha"      
          
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          
      - name: Get latest tag
        id: latest_tag
        run: |
          set +e
          tag=$(git describe --abbrev=0 --tag 2>/dev/null)
          if [ "$tag" == "" ]; then
            echo "no tags in the repo, using the first commit of the default branch"
            tag=$(git log --reverse --pretty=format:'%h' | head -n1)
          fi
          echo $tag
          echo "::set-output name=tag::$tag"
          
      - name: Build Changelog
        id: build_changelog
        uses: mikepenz/release-changelog-builder-action@v2.8.2
        with:
          configuration: ".github/changelog_config.json"
          fromTag: ${{ steps.latest_tag.outputs.tag }}
          toTag: HEAD
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Check Changelog
        if: steps.build_changelog.outputs.failed == 'true' || contains(steps.build_changelog.outputs.changelog, 'no changes')
        run: |
          echo "failed: ${{ steps.build_changelog.outputs.failed }}"
          exit 1
      
      - name: Create release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.short_sha.outputs.short_sha }}
          name: ${{ steps.short_sha.outputs.short_sha }}
          body: ${{ steps.build_changelog.outputs.changelog }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  Docker-build-deploy:
    runs-on: ubuntu-latest
    needs: create-release
    permissions:
      contents: 'read'
      id-token: 'write'
    
    steps:
    - uses: actions/checkout@v2
    
    - name: Update tag to GIT_SHA env property with commit short sha
      run: echo "GIT_SHA=`echo ${GITHUB_SHA} | cut -c1-8`" >> $GITHUB_ENV
      id: version
      
    - id: 'auth'
      name: 'Authenticate to Google Cloud'
      uses: 'google-github-actions/auth@v0'
      with:
        workload_identity_provider: ${{secrets.WIP_PROVIDER}}
        service_account: ${{secrets.WIP_SA}}
                     
    - name: Configure Docker Authentication
      run: gcloud auth configure-docker --quiet
    
    - name: Build and tag Docker Image
      run: docker build -t gcr.io/${{secrets.GCP_PROJECT_NAME}}go-code:sha-${{ github.sha }} .
        
#    - name: Scan image
#      uses: anchore/scan-action@v3
#      id: scan
#      with:
#        image: "gcr.io/${{secrets.GCP_PROJECT_NAME}}/go-code:sha-${{ github.sha }}"
#        acs-report-enable: true
#        severity-cutoff: critical
#        fail-build: false
#        debug: true
    
#    - name: Inspect action SARIF report
#      run: cat ${{ steps.scan.outputs.sarif }}
      
    - name: Push Docker image to GCR
      run: docker push gcr.io/${{secrets.GCP_PROJECT_NAME}}/go-code:sha-${{ github.sha }}
########################----------Cloud Run Configuration------------------############################### 
    - name: Deploy go code to cloud run
      id: deploy
      run: gcloud run deploy rest-api --image gcr.io/${{secrets.GCP_PROJECT_NAME}}/go-code:sha-${{ github.sha }} --platform managed --region europe-west4  --allow-unauthenticated --max-instances=1 --port=8000  --ingress=internal --timeout=30 --concurrency=80 --vpc-connector=projects/${{secrets.GCP_PROJECT_NAME}}/locations/europe-west4/connectors/kong-gw-cloudrun
########################----------Cloud Run Configuration------------------############################### 
